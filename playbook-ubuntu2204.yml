---
- name: MDR-RA DataSHIELD/Opal Installation Playbook
  hosts: localhost
  vars_files:
    - default_settings.yml
    - custom_settings.yml
    - container-images.yml
  vars:
    install_dir: "mdr-ra"
    install_dir_path: "/opt/{{ install_dir }}"
    kube_spec: "{{ install_dir_path }}/datashield-opal-kube.yml"
    storage_dir_path_list:
      - "{{ install_dir_path }}/db/opal"
      - "{{ install_dir_path }}/db/mongo"
      - "{{ install_dir_path }}/db/postgres"
    quadlets_dir_path: "/etc/containers/systemd/users/{{ datashield_uid }}"
    bitnami_container_internal_uid: 1001
    gather_facts: true

  tasks:
    # -----------------------------------------------------------------------------
    - name: Gather OS data into ansible facts
      tags: ['always']
      block:
        - name: Display some collected facts
          ansible.builtin.debug:
            msg: |
              Distribution: {{ ansible_facts.distribution }}
              Version: {{ ansible_facts.distribution_version }}
              Release: {{ ansible_facts.distribution_release }}
              OS Family: {{ ansible_facts.os_family }}
              Kernel: {{ ansible_facts.kernel }}
              Architecture: {{ ansible_facts.architecture }}
              Memory Total: {{ ansible_facts.memtotal_mb }} MB
              Processor Count: {{ ansible_facts.processor_count }}

        - name: Kill play execution if not running on target distribution
          ansible.builtin.meta: end_play
          when:
            - ansible_facts.distribution != "Ubuntu"
            - ansible_facts.distribution_major_version != "22"
    # -----------------------------------------------------------------------------
    - name: System Package Management and Updates (Ubuntu 24)
      become : true
      block:
        - name: Install aptitude
          ansible.builtin.apt:
            name:
              - aptitude
            state: latest
            update_cache: true
          tags: ['always']

        - name: Install required system packages
          ansible.builtin.apt:
            name:
              - ca-certificates
              - curl
              - gnupg
              - unattended-upgrades
              - systemd-container
              - acl
              - ufw
            state: latest
          tags: ['always']

        - name: Enable automatic system updates
          ansible.builtin.debconf:
            name: unattended-upgrades
            question: unattended-upgrades/enable_auto_updates
            vtype: boolean
            value: 'true'
          tags: ['always']

        - name: Add configuration file for automatic system updates
          ansible.builtin.command:
            cmd: dpkg-reconfigure -f noninteractive unattended-upgrades
            creates: /etc/apt/apt.conf.d/20auto-upgrades
          tags: ['always']
    # -----------------------------------------------------------------------------
    - name: Docker installation
      become: true
      block:
        - name: Install required packages needed to add Docker's GPG key
          ansible.builtin.apt:
            name:
              - ca-certificates
              - curl
            state: latest
            update_cache: true
          tags: ['always']

        - name: Add Docker's official GPG key
          ansible.builtin.shell: |
            install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
            chmod a+r /etc/apt/keyrings/docker.asc
          tags: ['always']

        - name: Add Docker repository
          ansible.builtin.shell: |
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
              $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
              sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          tags: ['always']

        - name: Install Docker
          ansible.builtin.apt:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
            state: latest
            update_cache: true
          tags: ['always']
    # -----------------------------------------------------------------------------
    - name: SSH Configuration
      become: true
      block:
        - name: Backup in use configurations
          ansible.builtin.copy:
            src: "/etc/ssh/sshd_config"
            dest: "/etc/ssh/sshd_config.d/sshd_config.bkp"
            remote_src: true
            backup: yes
          tags: ['always']

        - name: Disable SSH server configuration import
          ansible.builtin.lineinfile:
            path: '/etc/ssh/sshd_config'
            regex: '^(#)?{{ item }} (.*)'
            line: '#{{ item }} \2 # no cloud init thanks'
            backrefs: yes
            state: present
          loop:
            - "Include"

        - name: Reconfigure the SSH server
          ansible.builtin.lineinfile:
            path: '/etc/ssh/sshd_config'
            regex: '^(#)?{{item.key}} (.*)'
            line: '{{item.key}} {{item.value}} # was \2'
            backrefs: yes
            state: present
          loop:
            - {key: "PasswordAuthentication", value: "no"}
            - {key: "KbdInteractiveAuthentication", value: "no"}
            - {key: "ChallengeResponseAuthentication", value: "no"}
            - {key: "PubkeyAuthentication", value: "yes"}
            - {key: "PermitRootLogin", value: "no"}
            - {key: "GSSAPIAuthentication", value: "no"}
            - {key: "X11Forwarding", value: "no"}
            - {key: "UsePAM", value: "yes"}

        - name: Restart SSH
          become: true
          ansible.builtin.command:
            cmd: systemctl restart sshd
          tags: ['always']
    # -----------------------------------------------------------------------------
    - name: DataSHIELD User and Directory Setup
      become: true
      block:
        - name: Create a dedicated MDR-RA DataSHIELD user
          ansible.builtin.user:
            name: "{{ datashield_username }}"
            uid: "{{ datashield_uid }}"
            shell: /bin/bash
            create_home: true
          tags: ['always']

        - name: Enable lingering for the MDR-RA DataSHIELD user
          ansible.builtin.command:
            cmd: "loginctl enable-linger {{ datashield_username }}"
            creates: "/var/lib/systemd/linger/{{ datashield_username }}"
          tags: ['always']

        # Ubuntu 22.04
        - name: Allow the MDR-RA DataSHIELD user to run Docker containers
          ansible.builtin.shell: |
            groupadd docker
            usermod -aG docker {{ datashield_username }}
          tags: ['always']

        - name: Create required directories for DataSHIELD setup files
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            owner: "{{ datashield_username }}"
            group: "{{ datashield_username }}"
            mode: '0750'
          loop:
            - "{{ install_dir_path }}/nginx"
            - "{{ install_dir_path }}/https"
            - "{{ install_dir_path }}/https/ca"
            - "{{ install_dir_path }}/https/cert"
          tags: ['always']

        - name: Create required directories for DataSHIELD data storage
          become_user: "{{ datashield_username }}"
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: '0750'
          loop: "{{ storage_dir_path_list }}"
          tags: ['always']
    # -----------------------------------------------------------------------------
    - name: HTTPS Certificate Management
      block:
        - name: Delete existing certificates (manual trigger)
          become: true
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - "{{ install_dir_path }}/https/cert/privkey.pem"
            - "{{ install_dir_path }}/https/cert/fullchain.pem"
          tags: ['never', 'delete_https_certs']

        - name: Check existing and user-provided certificates
          block:
            - name: Check if privkey.pem is already installed
              become: true
              ansible.builtin.stat:
                path: "{{ install_dir_path }}/https/cert/privkey.pem"
              register: https_installed_privkey
              tags: ['always']

            - name: Check if fullchain.pem is already installed
              become: true
              ansible.builtin.stat:
                path: "{{ install_dir_path }}/https/cert/fullchain.pem"
              register: https_installed_fullchain
              tags: ['always']

            - name: Check if a valid privkey.pem is provided
              ansible.builtin.stat:
                path: "certs/privkey.pem"
              register: https_user_provided_cert_privkey
              tags: ['always']

            - name: Check if a valid fullchain.pem is provided
              become_user: "{{ datashield_username }}"
              ansible.builtin.stat:
                path: "certs/fullchain.pem"
              register: https_user_provided_cert_fullchain
              tags: ['always']

        - name: Install user-provided certificates
          when:
            - not https_installed_privkey.stat.exists
            - not https_installed_fullchain.stat.exists
            - https_user_provided_cert_privkey.stat.exists
            - https_user_provided_cert_fullchain.stat.exists
          become: true
          block:
            - name: Copy user-provided HTTPS private key and certificate
              ansible.builtin.copy:
                src: "certs/{{ item }}"
                dest: "{{ install_dir_path }}/https/cert"
                owner: "{{ datashield_username }}"
                group: "{{ datashield_username }}"
              loop:
                - privkey.pem
                - fullchain.pem
              tags: ['always']

            - name: Set permissions for the user-provided privkey.pem
              ansible.builtin.file:
                dest: "{{ install_dir_path }}/https/cert/privkey.pem"
                owner: "{{ datashield_username }}"
                group: "{{ datashield_username }}"
                mode: '0600'
              tags: ['always']

            - name: Set permissions for the user-provided fullchain.pem
              ansible.builtin.file:
                dest: "{{ install_dir_path }}/https/cert/fullchain.pem"
                owner: "{{ datashield_username }}"
                group: "{{ datashield_username }}"
                mode: '0644'
              tags: ['always']

        - name: Generate self-signed certificates
          when:
            - not https_installed_privkey.stat.exists
            - not https_installed_fullchain.stat.exists
            - not https_user_provided_cert_privkey.stat.exists
            - not https_user_provided_cert_fullchain.stat.exists
          become: true
          become_user: "{{ datashield_username }}"
          block:
            - name: HTTPS - Create private CA key with password protection
              community.crypto.openssl_privatekey:
                path: "{{ install_dir_path }}/https/ca/ca-certificate.key"
                passphrase: "{{ datashield_username }}"
                cipher: auto
              tags: ['always']

            - name: HTTPS - Create signing request (CSR) for CA certificate
              community.crypto.openssl_csr_pipe:
                privatekey_path: "{{ install_dir_path }}/https/ca/ca-certificate.key"
                privatekey_passphrase: "{{ datashield_username }}"
                common_name: MDR-RA CA
                use_common_name_for_san: false
                basic_constraints:
                  - 'CA:TRUE'
                basic_constraints_critical: true
                key_usage:
                  - keyCertSign
                key_usage_critical: true
              register: ca_csr
              tags: ['always']

            - name: HTTPS - Create self-signed CA certificate from CSR
              community.crypto.x509_certificate:
                path: "{{ install_dir_path }}/https/ca/ca-certificate.pem"
                csr_content: "{{ ca_csr.csr }}"
                privatekey_path: "{{ install_dir_path }}/https/ca/ca-certificate.key"
                privatekey_passphrase: "{{ datashield_username }}"
                provider: selfsigned
              tags: ['always']

            - name: HTTPS - Create a private key for the new certificate
              community.crypto.openssl_privatekey:
                path: "{{ install_dir_path }}/https/cert/privkey.pem"
              run_once: true
              tags: ['always']

            - name: HTTPS - Create the certificate signing request (CSR)
              community.crypto.openssl_csr_pipe:
                privatekey_path: "{{ install_dir_path }}/https/cert/privkey.pem"
                subject_alt_name:
                  - "DNS:mdr-ra"
                  - "DNS:kvm.opal.ubuntu22" # TODO: Remove, added for testing pourpouse
              run_once: true
              register: csr
              tags: ['always']

            - name: HTTPS - Sign certificate with our CA
              community.crypto.x509_certificate_pipe:
                csr_content: "{{ csr.csr }}"
                provider: ownca
                ownca_path: "{{ install_dir_path }}/https/ca/ca-certificate.pem"
                ownca_privatekey_path: "{{ install_dir_path }}/https/ca/ca-certificate.key"
                ownca_privatekey_passphrase: "{{ datashield_username }}"
                ownca_not_after: +3650d
                ownca_not_before: "-1d"
              run_once: true
              register: certificate
              tags: ['always']

            - name: HTTPS - Write certificate file
              copy:
                dest: "{{ install_dir_path }}/https/cert/fullchain.pem"
                content: "{{ certificate.certificate }}"
              run_once: true
              tags: ['always']
    # -----------------------------------------------------------------------------
    - name: Firewall Configuration (UFW)
      become: true
      block:
        - name: Reset the firewall
          community.general.ufw:
            state: reset
          tags: ['always']

        - name: Allow outgoing connections
          community.general.ufw:
            default: allow
            direction: outgoing
          tags: ['always', 'firewall']

        - name: Block incoming connections
          community.general.ufw:
            default: deny
            direction: incoming
          tags: ['always', 'firewall']

        - name: Allow DataSHIELD HTTPS connections
          community.general.ufw:
            rule: allow
            direction: in
            port: '{{ public_https_port }}'
            proto: tcp
            from_ip: '{{ item }}'
          loop: "{{ allowed_https_client_networks }}"
          tags: ['public_ip', 'firewall']
          when: "'public_ip' in ansible_run_tags"

        - name: Enable rate limiting for the DataSHIELD HTTPS interface
          community.general.ufw:
            rule: limit
            port: '{{ public_https_port }}'
            proto: tcp
          tags: ['public_ip', 'firewall']
          when: "'public_ip' in ansible_run_tags"

        - name: Allow SSH connections for system administrators
          community.general.ufw:
            rule: allow
            direction: in
            port: 22
            proto: tcp
            from_ip: '{{ item }}'
          loop: "{{ allowed_ssh_client_networks }}"
          tags: ['always', 'firewall']

        - name: Enable Firewall
          community.general.ufw:
            state: enabled
          tags: ['always', 'firewall']
    # -----------------------------------------------------------------------------
    - name: Software Installation Setup
      become: true
      block:
        - name: Copy installation and configuration files - NGINX files
          ansible.builtin.copy:
            src: "files/nginx/{{ item }}"
            dest: "{{ install_dir_path }}/nginx"
            owner: "{{ datashield_username }}"
            group: "{{ datashield_username }}"
          loop:
            - server.conf
          tags: ['always']

        - name: Set ownership for HTTPS certs
          ansible.builtin.command: "chown 1001:1001 -R \
                                    {{ install_dir_path }}/https/cert/"
          tags: ['always']

        - name: Copy compose files to install location
          ansible.builtin.copy:
            src: "{{ item }}"
            dest: "{{ install_dir_path }}"
            owner: "{{ datashield_username }}"
            group: "{{ datashield_username }}"
          loop:
            - "files/datashield-opal-compose.yml"
            - "files/datashield-opal-compose.env"
          tags: ['always']

        - name: Set the desired HTTPS service port in the compose file
          ansible.builtin.replace:
            path: "{{ install_dir_path }}/datashield-opal-compose.env"
            regexp: '^(HTTPS_PORT)=.*(# ANSIBLE REPLACE HTTPS PORT)'
            replace: '\1={{ public_https_port }} \2'
          tags: ['always']

        - name: Pull container images
          become_user: "{{ datashield_username }}"
          ansible.builtin.command:
            cmd: "docker pull {{ item }}"
          loop:
            - "{{ opal_image_tag }}"
            - "{{ postgres_image_tag }}"
            - "{{ rock_image_tag }}"
            - "{{ nginx_image_tag }}"
          tags: ['always']

        - name: If present, stop the service
          become_user: "{{ datashield_username }}"
          ansible.builtin.command:
            cmd: "docker compose --file {{ install_dir_path }}/datashield-opal-compose.yml down"
          ignore_errors: true
          tags: ['always']

        - name: Start the service
          become_user: "{{ datashield_username }}"
          ansible.builtin.command:
            cmd: "docker compose --env-file {{ install_dir_path }}/datashield-opal-compose.env --file {{ install_dir_path }}/datashield-opal-compose.yml up --detach"
          tags: ['always']
