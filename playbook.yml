---
- name: MDR-RA DataSHIELD/Opal Installation Playbook
  hosts: localhost
  vars_files:
    - default_settings.yml
    - custom_settings.yml
  vars:
    install_dir: "mdr-ra"
    install_dir_path: "/opt/{{ install_dir }}"
    storage_dir_path_list:
      - "{{ install_dir_path }}/db/opal"
      - "{{ install_dir_path }}/db/mongo"
      - "{{ install_dir_path }}/db/postgres"
    quadlets_dir_path: "/etc/containers/systemd/users/{{ datashield_uid }}"
    bitnami_container_internal_uid: 1001
    public_https_port: 8000
  tasks:
    - name: Install aptitude
      become: true
      ansible.builtin.apt:
        name:
          - aptitude
        state: latest
        update_cache: true
      tags: ['always']

    - name: Install required system packages
      become: true
      ansible.builtin.apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - uidmap
          - dbus-user-session
          - systemd-container
          - unattended-upgrades
          - acl
          - ufw
          - podman
        state: latest
      tags: ['always']

    - name: Enable automatic system updates
      become: true
      ansible.builtin.debconf:
        name: unattended-upgrades
        question: unattended-upgrades/enable_auto_updates
        vtype: boolean
        value: 'true'
      tags: ['always']

    - name: Add configuration file for automatic system updates
      become: true
      ansible.builtin.command:
        cmd: dpkg-reconfigure -f noninteractive unattended-upgrades
        creates: /etc/apt/apt.conf.d/20auto-upgrades
      tags: ['always']

    - name: Reconfigure the SSH server
      become: true
      ansible.builtin.copy:
        src: "files/sshd_config"
        dest: "/etc/ssh/sshd_config.d/00-datashield-server.conf"
        owner: "root"
        group: "root"
        mode: 0600
      tags: ['always']

    - name: Restart SSH
      become: true
      ansible.builtin.systemd_service:
        name: ssh.service
        state: restarted
        enabled: true
      tags: ['always']

    - name: Create a dedicated MDR-RA DataSHIELD user
      become: true
      ansible.builtin.user:
        name: "{{ datashield_username }}"
        uid: "{{ datashield_uid }}"
        shell: /bin/bash
        create_home: true
      tags: ['always']

    - name: Enable lingering for the MDR-RA DataSHIELD user
      become: true
      ansible.builtin.command:
        cmd: "loginctl enable-linger {{ datashield_username }}"
        creates: "/var/lib/systemd/linger/{{ datashield_username }}"
      tags: ['always']

    - name: Create required directories for DataSHIELD setup files
      become: true
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ datashield_username }}"
        group: "{{ datashield_username }}"
        mode: '0750'
      loop:
        - "{{ install_dir_path }}/nginx"
        - "{{ install_dir_path }}/https"
        - "{{ install_dir_path }}/https/ca"
        - "{{ install_dir_path }}/https/cert"
      tags: ['always']

    - name: Create required directories for DataSHIELD data storage
      become: true
      become_user: "{{ datashield_username }}"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0750'
      loop: "{{ storage_dir_path_list }}"
      tags: ['always']

    - name: Set ownership for DB data directories owned by non-root users
      become: true
      become_user: "{{ datashield_username }}"
      ansible.builtin.command: "podman unshare chown -R 1001:1001 {{ item }}"
      with_items:
        - "{{ install_dir_path }}/db/mongo"
        - "{{ install_dir_path }}/db/postgres"
      tags: ['always']

    - name: HTTPS - Delete existing certificates
      become: true
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ install_dir_path }}/https/cert\
           /privkey.pem"
        - "{{ install_dir_path }}/https/cert\
           /fullchain.pem"
      tags: ['never', 'delete_https_certs']

    # HTTPS Certificates Tests
    - block:
        - name: HTTPS - Check if privkey.pem is already installed
          become: true
          ansible.builtin.stat:
            path: "{{ install_dir_path }}/https/cert\
                   /privkey.pem"
          register: https_installed_privkey
          tags: ['always']

        - name: HTTPS - Check if fullchain.pem is already installed
          become: true
          ansible.builtin.stat:
            path: "{{ install_dir_path }}/https/cert\
                   /fullchain.pem"
          register: https_installed_fullchain
          tags: ['always']

        - name: HTTPS - Check if a valid privkey.pem is provided
          ansible.builtin.stat:
            path: "certs/privkey.pem"
          register: https_user_provided_cert_privkey
          tags: ['always']

        - name: HTTPS - Check if a valid fullchain.pem is provided
          become_user: "{{ datashield_username }}"
          ansible.builtin.stat:
            path: "certs/fullchain.pem"
          register: https_user_provided_cert_fullchain
          tags: ['always']

    # HTTPS certificate installation (user-provided)
    - block:
        - name: HTTPS - Copy user-provided HTTPS private key and certificate
          become: true
          ansible.builtin.copy:
            src: "certs/{{ item }}"
            dest: "{{ install_dir_path }}/https/cert"
            owner: "{{ datashield_username }}"
            group: "{{ datashield_username }}"
          loop:
            - privkey.pem
            - fullchain.pem
          tags: ['always']

        - name: Set permissions for the user-provided privkey.pem
          become: true
          ansible.builtin.file:
            dest: "{{ install_dir_path }}/https/cert/\
                   privkey.pem"
            owner: "{{ datashield_username }}"
            group: "{{ datashield_username }}"
            mode: '0600'
          tags: ['always']

        - name: Set permissions for the user-provided fullchain.pem
          become: true
          ansible.builtin.file:
            dest: "{{ install_dir_path }}/https/cert/\
                   fullchain.pem"
            owner: "{{ datashield_username }}"
            group: "{{ datashield_username }}"
            mode: '0644'
          tags: ['always']
      when:
        - not https_installed_privkey.stat.exists
        - not https_installed_fullchain.stat.exists
        - https_user_provided_cert_privkey.stat.exists
        - https_user_provided_cert_fullchain.stat.exists
      become: true

    # HTTPS certificate generation (self-signed)
    - block:
        - name: HTTPS - Create private CA key with password protection
          community.crypto.openssl_privatekey:
            path: "{{ install_dir_path }}/https/ca\
                   /ca-certificate.key"
            passphrase: "{{ datashield_username }}"
            cipher: auto
          tags: ['always']

        - name: HTTPS - Create signing request (CSR) for CA certificate
          community.crypto.openssl_csr_pipe:
            privatekey_path: "{{ install_dir_path }}/https/ca\
                              /ca-certificate.key"
            privatekey_passphrase: "{{ datashield_username }}"
            common_name: MDR-RA CA
            use_common_name_for_san: false
            basic_constraints:
              - 'CA:TRUE'
            basic_constraints_critical: true
            key_usage:
              - keyCertSign
            key_usage_critical: true
          register: ca_csr
          tags: ['always']

        - name: HTTPS - Create self-signed CA certificate from CSR
          community.crypto.x509_certificate:
            path: "{{ install_dir_path }}/https/ca\
                   /ca-certificate.pem"
            csr_content: "{{ ca_csr.csr }}"
            privatekey_path: "{{ install_dir_path }}/https/ca\
                              /ca-certificate.key"
            privatekey_passphrase: "{{ datashield_username }}"
            provider: selfsigned
          tags: ['always']

        - name: HTTPS - Create a private key for the new certificate
          community.crypto.openssl_privatekey:
            path: "{{ install_dir_path }}/https/cert\
                   /privkey.pem"
          run_once: true
          tags: ['always']

        - name: HTTPS - Create the certificate signing request (CSR)
          community.crypto.openssl_csr_pipe:
            privatekey_path: "{{ install_dir_path }}/https/cert\
                              /privkey.pem"
            subject_alt_name:
              - "DNS:mdr-ra"
          run_once: true
          register: csr
          tags: ['always']

        - name: HTTPS - Sign certificate with our CA
          community.crypto.x509_certificate_pipe:
            csr_content: "{{ csr.csr }}"
            provider: ownca
            ownca_path: "{{ install_dir_path }}/https/ca\
                         /ca-certificate.pem"
            ownca_privatekey_path: "{{ install_dir_path }}/https/ca\
                                    /ca-certificate.key"
            ownca_privatekey_passphrase: "{{ datashield_username }}"
            ownca_not_after: +3650d
            ownca_not_before: "-1d"
          run_once: true
          register: certificate
          tags: ['always']

        - name: HTTPS - Write certificate file
          copy:
            dest: "{{ install_dir_path }}/https/cert\
                   /fullchain.pem"
            content: "{{ certificate.certificate }}"
          run_once: true
          tags: ['always']

      when:
        - not https_installed_privkey.stat.exists
        - not https_installed_fullchain.stat.exists
        - not https_user_provided_cert_privkey.stat.exists
        - not https_user_provided_cert_fullchain.stat.exists
      become: true
      become_user: "{{ datashield_username }}"

    - block:
        - name: UFW - Reset
          community.general.ufw:
            state: reset
          tags: ['always']

        - name: UFW - Allow outgoing connections
          community.general.ufw:
            default: allow
            direction: outgoing
          tags: ['always', 'firewall']

        - name: UFW - Block incoming connections
          community.general.ufw:
            default: deny
            direction: incoming
          tags: ['always', 'firewall']

        - name: UFW - Allow DataSHIELD HTTPS connections
          community.general.ufw:
            rule: allow
            direction: in
            port: '{{ public_https_port }}'
            proto: tcp
            from_ip: '{{ item }}'
          loop: "{{ allowed_https_client_networks }}"
          tags: ['public_ip', 'firewall']
          when: "'public_ip' in ansible_run_tags"

        - name: UFW - Enable rate limiting for the DataSHIELD HTTPS interface
          community.general.ufw:
            rule: limit
            port: '{{ public_https_port }}'
            proto: tcp
          tags: ['public_ip', 'firewall']
          when: "'public_ip' in ansible_run_tags"

        - name: UFW - Allow SSH connections for system administrators
          community.general.ufw:
            rule: allow
            direction: in
            port: 22
            proto: tcp
            from_ip: '{{ item }}'
          loop: "{{ allowed_ssh_client_networks }}"
          tags: ['always', 'firewall']

        - name: UFW - Enable Firewall
          community.general.ufw:
            state: enabled
          tags: ['always', 'firewall']
      become: true

    - name: Copy installation and configuration files - datashield-opal-kube.yml
      become: true
      ansible.builtin.copy:
        src: "files/datashield-opal-kube.yml"
        dest: "{{ install_dir_path }}"
        owner: "{{ datashield_username }}"
        group: "{{ datashield_username }}"
      tags: ['always']

    - name: Copy installation and configuration files - NGINX files
      become: true
      ansible.builtin.copy:
        src: "files/nginx/{{ item }}"
        dest: "{{ install_dir_path }}/nginx"
        owner: "{{ datashield_username }}"
        group: "{{ datashield_username }}"
      loop:
        - server.conf
      tags: ['always']

    - name: Set ownership for the HTTPS private key
      become: true
      become_user: "{{ datashield_username }}"
      ansible.builtin.command: "podman unshare chown 1001:1001 \
                                {{ install_dir_path }}/https/cert/privkey.pem"
      tags: ['always']

    - name: Set ownership for the HTTPS certificate
      become: true
      become_user: "{{ datashield_username }}"
      ansible.builtin.command: "podman unshare chown 1001:1001 \
                                {{ install_dir_path }}/https/cert/fullchain.pem"
      tags: ['always']

    - name: Create a dedicated Podman network
      become: true
      become_user: "{{ datashield_username }}"
      containers.podman.podman_network:
        name: "{{ podman_network }}"
      tags: ['always']

    - name: Create required directories for DataSHIELD setup files
      become: true
      ansible.builtin.file:
        path: "{{ quadlets_dir_path }}"
        state: directory
        owner: "{{ datashield_username }}"
        group: "{{ datashield_username }}"
        mode: '0750'
      tags: ['always']

    - name: Copy quadlet files to install location
      become: true
      ansible.builtin.copy:
        src: "files/opal-datashield.kube"
        dest: "{{ quadlets_dir_path }}"
        owner: "{{ datashield_username }}"
        group: "{{ datashield_username }}"
      tags: ['always']

    - name: If present, stop the service
      become: true
      become_user: "{{ datashield_username }}"
      ansible.builtin.systemd_service:
        scope: "user"
        name: "opal-datashield.service"
        state: "started"
      ignore_errors: true
      tags: ['always']

    - name: Reload systemd daemon and create service definitions
      become: true
      become_user: "{{ datashield_username }}"
      ansible.builtin.systemd_service:
        daemon_reload: true
        scope: "user"
      tags: ['always']

    - name: Start the service
      become: true
      become_user: "{{ datashield_username }}"
      ansible.builtin.systemd_service:
        scope: "user"
        name: "opal-datashield.service"
        state: "started"
      tags: ['always']
